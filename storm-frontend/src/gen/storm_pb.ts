// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file storm.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.StormRequest
 */
export class StormRequest extends Message<StormRequest> {
  /**
   * @generated from field: string region = 1;
   */
  region = "";

  constructor(data?: PartialMessage<StormRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.StormRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StormRequest {
    return new StormRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StormRequest {
    return new StormRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StormRequest {
    return new StormRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StormRequest | PlainMessage<StormRequest> | undefined, b: StormRequest | PlainMessage<StormRequest> | undefined): boolean {
    return proto3.util.equals(StormRequest, a, b);
  }
}

/**
 * @generated from message proto.StormUpdate
 */
export class StormUpdate extends Message<StormUpdate> {
  /**
   * @generated from field: float latitude = 1;
   */
  latitude = 0;

  /**
   * @generated from field: float longitude = 2;
   */
  longitude = 0;

  /**
   * @generated from field: int32 wind_speed = 3;
   */
  windSpeed = 0;

  /**
   * @generated from field: string timestamp = 4;
   */
  timestamp = "";

  constructor(data?: PartialMessage<StormUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.StormUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "latitude", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "longitude", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "wind_speed", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StormUpdate {
    return new StormUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StormUpdate {
    return new StormUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StormUpdate {
    return new StormUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: StormUpdate | PlainMessage<StormUpdate> | undefined, b: StormUpdate | PlainMessage<StormUpdate> | undefined): boolean {
    return proto3.util.equals(StormUpdate, a, b);
  }
}

