// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: storm.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StormService_StreamStormUpdates_FullMethodName = "/proto.StormService/StreamStormUpdates"
)

// StormServiceClient is the client API for StormService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StormServiceClient interface {
	StreamStormUpdates(ctx context.Context, in *StormRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StormUpdate], error)
}

type stormServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStormServiceClient(cc grpc.ClientConnInterface) StormServiceClient {
	return &stormServiceClient{cc}
}

func (c *stormServiceClient) StreamStormUpdates(ctx context.Context, in *StormRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StormUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StormService_ServiceDesc.Streams[0], StormService_StreamStormUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StormRequest, StormUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StormService_StreamStormUpdatesClient = grpc.ServerStreamingClient[StormUpdate]

// StormServiceServer is the server API for StormService service.
// All implementations must embed UnimplementedStormServiceServer
// for forward compatibility.
type StormServiceServer interface {
	StreamStormUpdates(*StormRequest, grpc.ServerStreamingServer[StormUpdate]) error
	mustEmbedUnimplementedStormServiceServer()
}

// UnimplementedStormServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStormServiceServer struct{}

func (UnimplementedStormServiceServer) StreamStormUpdates(*StormRequest, grpc.ServerStreamingServer[StormUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamStormUpdates not implemented")
}
func (UnimplementedStormServiceServer) mustEmbedUnimplementedStormServiceServer() {}
func (UnimplementedStormServiceServer) testEmbeddedByValue()                      {}

// UnsafeStormServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StormServiceServer will
// result in compilation errors.
type UnsafeStormServiceServer interface {
	mustEmbedUnimplementedStormServiceServer()
}

func RegisterStormServiceServer(s grpc.ServiceRegistrar, srv StormServiceServer) {
	// If the following call pancis, it indicates UnimplementedStormServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StormService_ServiceDesc, srv)
}

func _StormService_StreamStormUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StormRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StormServiceServer).StreamStormUpdates(m, &grpc.GenericServerStream[StormRequest, StormUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StormService_StreamStormUpdatesServer = grpc.ServerStreamingServer[StormUpdate]

// StormService_ServiceDesc is the grpc.ServiceDesc for StormService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StormService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StormService",
	HandlerType: (*StormServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStormUpdates",
			Handler:       _StormService_StreamStormUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storm.proto",
}
